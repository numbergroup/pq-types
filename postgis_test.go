package pq_types

import (
	. "github.com/numbergroup/check"
)

func (s *TypesSuite) TestPostGISPointScanValue(c *C) {
	var a PostGISPoint
	b := []byte{
		0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x45, 0x36,
		0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x34, 0x36, 0x45, 0x38, 0x36,
		0x31, 0x42, 0x46, 0x30, 0x43, 0x44, 0x34, 0x32, 0x34, 0x30, 0x32, 0x31,
		0x39, 0x34, 0x46, 0x37, 0x37, 0x31, 0x33, 0x34, 0x45, 0x39, 0x34, 0x42,
		0x34, 0x30,
	}
	c.Check(a.Scan(b), IsNil)
	c.Check(a, DeepEquals, PostGISPoint{Lon: 37.6088900, Lat: 55.8219130})
	v, err := a.Value()
	c.Check(err, IsNil)
	c.Check(v, DeepEquals, []byte(`SRID=4326;POINT(37.60889000 55.82191300)`), Commentf("%s", v))
}

func (s *TypesSuite) TestPostGISPoint(c *C) {
	if s.skipPostGIS {
		c.Skip("PostGIS not available")
	}

	for _, p := range []PostGISPoint{
		{Lon: 37.6088900, Lat: 55.8219130},
		{Lon: -37.6088900, Lat: -55.8219130},
		{Lon: 0, Lat: 0},
		{Lon: 0.00, Lat: 0.0},
	} {
		s.SetUpTest(c)

		_, err := s.db.Exec("INSERT INTO pq_types (point) VALUES($1)", p)
		c.Assert(err, IsNil)

		p1 := PostGISPoint{Lon: -1, Lat: -1}
		err = s.db.QueryRow("SELECT point FROM pq_types").Scan(&p1)
		c.Check(err, IsNil)

		c.Check(p1, DeepEquals, p)
	}
}

func (s *TypesSuite) TestPostGISBox2DScanValue(c *C) {
	var a PostGISBox2D
	b := []byte{
		0x42, 0x4f, 0x58, 0x28, 0x30, 0x2e, 0x31, 0x32, 0x35, 0x20, 0x30, 0x2e,
		0x32, 0x35, 0x2c, 0x30, 0x2e, 0x35, 0x20, 0x31, 0x29,
	}
	c.Check(a.Scan(b), IsNil)
	c.Check(a, DeepEquals, PostGISBox2D{Min: PostGISPoint{Lon: 0.125, Lat: 0.25}, Max: PostGISPoint{Lon: 0.5, Lat: 1}})
	v, err := a.Value()
	c.Check(err, IsNil)
	c.Check(v, DeepEquals, []byte(`BOX(0.12500000 0.25000000,0.50000000 1.00000000)`), Commentf("%s", v))
}

func (s *TypesSuite) TestPostGISBox2D(c *C) {
	if s.skipPostGIS {
		c.Skip("PostGIS not available")
	}

	for _, b := range []PostGISBox2D{
		{Min: PostGISPoint{Lon: 0.125, Lat: 0.25}, Max: PostGISPoint{Lon: 0.5, Lat: 1}},
		{Min: PostGISPoint{Lon: -0.125, Lat: -0.25}, Max: PostGISPoint{Lon: 0.5, Lat: 1}},
		{Min: PostGISPoint{Lon: -0.55, Lat: -0.55}, Max: PostGISPoint{Lon: 0.5, Lat: 1}},
	} {
		s.SetUpTest(c)

		_, err := s.db.Exec("INSERT INTO pq_types (box) VALUES($1)", b)
		c.Assert(err, IsNil)

		var b1 PostGISBox2D
		err = s.db.QueryRow("SELECT box FROM pq_types").Scan(&b1)
		c.Check(err, IsNil)

		c.Check(b1, DeepEquals, b)
	}
}

func (s *TypesSuite) TestPostGISPolygonScanValue(c *C) {
	var a PostGISPolygon
	b := []byte{
		0x30, 0x31, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x45, 0x36,
		0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x43, 0x30,
		0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x44, 0x30, 0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x43, 0x30, 0x33, 0x46, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x46, 0x30,
		0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x45, 0x30, 0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x46, 0x30, 0x33, 0x46, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x45, 0x30,
		0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x44, 0x30, 0x33, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x43, 0x30, 0x33, 0x46, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x44, 0x30,
		0x33, 0x46,
	}
	c.Check(a.Scan(b), IsNil)
	c.Check(a, DeepEquals, PostGISPolygon{
		Points: []PostGISPoint{
			{Lon: 0.125, Lat: 0.25},
			{Lon: 0.125, Lat: 1},
			{Lon: 0.5, Lat: 1},
			{Lon: 0.5, Lat: 0.25},
			{Lon: 0.125, Lat: 0.25},
		},
	})
	v, err := a.Value()
	c.Check(err, IsNil)
	c.Check(v, DeepEquals, []byte(`SRID=4326;POLYGON((0.12500000 0.25000000,0.12500000 1.00000000,0.50000000 1.00000000,0.50000000 0.25000000,0.12500000 0.25000000))`), Commentf("%s", v))
}

func (s *TypesSuite) TestPostGISPolygon(c *C) {
	if s.skipPostGIS {
		c.Skip("PostGIS not available")
	}

	for _, p := range []PostGISPolygon{
		{
			Points: []PostGISPoint{
				{Lon: 0.125, Lat: 0.25},
				{Lon: 0.125, Lat: 1},
				{Lon: 0.5, Lat: 1},
				{Lon: 0.5, Lat: 0.25},
				{Lon: 0.125, Lat: 0.25}}},
		{
			Points: []PostGISPoint{
				{Lon: 0.0, Lat: 0.0},
				{Lon: -50.555, Lat: -50.555},
				{Lon: -50, Lat: 0},
				{Lon: 0, Lat: 0}}},
	} {
		s.SetUpTest(c)

		_, err := s.db.Exec("INSERT INTO pq_types (polygon) VALUES($1)", p)
		c.Assert(err, IsNil)

		var p1 PostGISPolygon
		err = s.db.QueryRow("SELECT polygon FROM pq_types").Scan(&p1)
		c.Check(err, IsNil)

		c.Check(p1, DeepEquals, p)
	}
}
